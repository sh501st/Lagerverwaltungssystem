#+STARTUP: beamer showall
#+TITLE: Lagerverwaltungssystem
#+AUTHOR: Robert Werner, Jialun Jiang, Daniel Wolff
#+LANGUAGE: de
#+OPTIONS: H:2 toc:t num:t
#+LATEX_CLASS: beamer
#+BEAMER_HEADER: \subtitle{Programmierpraktikum SS18}
#+LATEX_HEADER: \institute[short name]{Institut für Informatik}
#+LATEX_HEADER: \usetheme{TUC2}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage[scale=.875]{FiraSans}
#+LATEX_HEADER: \usepackage[scale=.875]{FiraMono}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{fontsize=\scriptsize,baselinestretch=1}
#+LaTeX_HEADER: \usepackage{color}

* Prelude [1/2]                                                    :noexport:

This will not be exported to the PDF. Useful for task and todo listings.
Furthermore, I'll slightly modify the clausthal template in the days to come.

** DONE colorize code and shell listings
** TODO include content [8/9]:
DEADLINE: <2018-07-23 Mon>

- [X] Motivation / Welches Problem soll gelöst werden? / Idee / Ansatz (1-3 Folien)
- [X] User Stories (ggf. Epics oder Use Cases) (2-4 Folien)
- [x] Domänenmodell (1-2 Folien)
- [x] Architekturbeschreibung (3-8 Folien)
- [X] Optional: Implementierungsdetails: Algorithmen, etc.
- [X] Verwendete Technologien (1-2 Folien)
- [X] Üersicht über verwendetete Entwicklungstools (1-2 Folien)
- [X] Installationsbeschreibung (1-2 Folien)
- [ ] Optional: Lessons Learned (1 Folie)

* Motivation

** Idee

#+ATTR_LATEX: :width 0.8\textwidth
[[../graphics/heatmap-idea.png]]

** Vorstellung

#+ATTR_LATEX: :width 0.9\textwidth
[[../graphics/milestone_1_user_stories_storage.png]]

** Mockup-Ansätze

#+ATTR_LATEX: :width 0.9\textwidth
[[../graphics/mockup-view.png]]

* User-Storys

** User-Stories: Regalzugriffe (1/2)

Im Detail registrieren und einsehen, welche Waren wann wo ein- und ausgehen:

\footnotesize

*** Regalzugriffe: Entnahmeübersicht
Als Lagerlogistiker will ich einsehen können, welche Lagerwaren
innerhalb eines bestimmten Zeitrahmens entnommen wurden, um besser
planen zu können.

*** Regalzugriffe: Zugriffsabhängigkeiten
Als Lagerlogistiker will ich wissen, welche Lagerwaren innerhalb eines
bestimmten Zeitrahmens zumeist gemeinsam entnommen wurden, um
Abhängigkeiten zwischen diesen zu erkennen.

** User-Stories: Regalzugriffe (2/2)

\footnotesize

*** Regalzugriffe: Heatmap
Als Lagerlogistiker will ich auf einen Blick sehen, wie die
Regalzugriffe im Lager räumlich verteilt sind, um ggf. Optimierungen
in Auftrag geben zu können.

*** Regalzugriffe: Entnahme durch Mitarbeiter
Als Lagerfachkraft will ich, dass das System mit minimalem Aufwand
meinerseits meine Entnahmen registriert, sodass ich diese nicht
zeitaufwendig händisch festhalten muss.

** User-Stories: Lagerübersicht

Was wird im Lager wo und in Gesamtheit gelagert?

\footnotesize

*** Lagerübersicht: Artikel einsehen
Als Lagerlogistiker will ich stets einsehen, welche Artikel in meinem
Lager geführt werden, um nicht den Überblick zu verlieren oder falsch
zu kalkulieren.

*** Lagerübersicht: Regal einsehen
Als Lagerlogistiker will ich für jedes Lagerregal aufgelistet
bekommen, was sich darin befindet, um einen besseren Überblick über
den Bestand zu erhalten.

*** Lagerübersicht: Lageplan für aktuelle Bestellung
Als Lagerfachkraft will ich auf einen Blick entnehmen können, in
welchen Regalen sich die zur aktuellen Bestellung zugehörigen Artikel
befinden, um diese effizient abzuarbeiten und nicht unnnötig durchs
Lager zu irren.

** User-Stories: Umräumung

Welche Optimierung sind denkbar und wie gilt es, diese umzusetzen?

\footnotesize

*** Umräumung: Planungsvorschläge zur Wegminimierung
Als Lagerlogistiker will ich Vorschläge zu etwaigen
effizienzsteigernden Umräumungen einsehen, die dabei Mitarbeiterweg,
Regalzugriffe und Warenabhängigkeiten berücksichtigen, um abschätzen
zu können, welche Ablaufoptimierungen sinning sind.

* Domänenmodell

#+ATTR_LATEX: :width 0.9\textwidth
[[../architecture/Domainmodel.png]]

* Architekturbeschreibung

** Context View
#+ATTR_LATEX: :width 0.9\textwidth
[[../architecture/Context View.png]]

** Structual View
#+ATTR_LATEX: :width 0.9\textwidth
[[../architecture/Structual View.png]]


** Deployment View
#+ATTR_LATEX: :width 0.9\textwidth
[[../architecture/Deployment View.png]]

* Implementationsdetails

** Wegfindung

#+begin_src js
// try to find a rather efficient path for the worker to take, but not
// necessarily the shortest path possible since we're only checking
// shortest manhatten distance for the next shelf to go to and are not
// taking into account which duplication could be avoided due to one
// being along the way of another shelf. (Module: include/pathfinding.js)
exports.generateWorkerPath = (storage, order) => {
    // first step: rough super path without collision avoidance
    const closestEntrace = findClosestEntrance(storage, order);
    let path = [closestEntrace.x, closestEntrace.y];
    appendNearestShelves(path, storage, order);
    const closestExit = findClosestExit(path, storage);
    path.push(closestExit.x, closestExit.y);

    // second step: find optimal tile based sub paths between closest
    // shelves, respecting non-walkable areas.
    return getInterpolatedPath(path, storage, closestExit);
};
#+end_src

** Fächeroptimierung

#+begin_src js
  // querys the db for a set of article ids and associated accesses over
  // a given time range. We transform the original default storage into
  // an optimized one by first recursively cloning it and removing all
  // the subshelves within each and every regular shelf. Then we refill
  // it based on the received log data by picking the closest unfilled
  // shelf from each entrance until all articles are in place again.
  // Access counter data will be stored within the storage to later
  // visualize it in plan.js (Module: include/optimize.js)
  exports.rearrangeSubShelves = (storage, fromTime, toTime, callback) => {
      db.sortedAccessesInRange(fromTime, toTime, storage._id, (results) => {
          let optimizedStorage = JSON.parse(JSON.stringify(storage));
          initAccessValues(storage, results);
          initAccessValues(optimizedStorage, results);
          const subShelves = removeAllSubShelves(optimizedStorage);
          fillSubShelvesByAccess(optimizedStorage, subShelves, results);
          calcMaxAccessCounter(storage);
          calcMaxAccessCounter(optimizedStorage);
          callback(optimizedStorage);
      });
  };
#+end_src

* Verwendete Technologien

** Technologien

| NodeJS        | Javascript-Runtime fürs Backend        |
| npm           | NodeJS-Package-Manager                 |
| MySQL/MariaDB | Datenbank für Artikel und Zugriffs-Log |
| WebSocket+ws  | Client-Server-Kommunikation            |
| Konva         | HTML5-Canvas-Abstraktion               |
| NoUiSlider    | Multifunktionsschieberegler            |

Ansonsten HTML5, CSS, ECMAScript 2017.

** npm-Module

| http+ws | Client-Server-Kommunikation via Websocket     |
| express | HTML-Seiten an Clients ausliefern             |
| fs      | plattformübergreifende Filesystem-Abstraktion |
| mysql   | MySQL/MariaDB-JS-Wrapper                      |

* Verwendete Entwicklungstools

** Entwicklungstools

| Bash+Nodemon     | kleinere Skripte zu Automatisierungszwecken   |
| Browser-Konsolen | Logging, Debugging, Profiling                 |
| Git+GitHub       | Quelltext-Versionskontrolle                   |
| GitHub Projects  | Kanban-lite zur Aufgabenaufteilung            |
| GitHub Issues    | Bugtracking und Verbesserungsvorschläge       |
| GitHub Wiki      | User-Stories, Mockups, Dokumentation, Notizen |
| Telegram         | Gruppenchat, Absprachen                       |
| Inkscape         | Vektorzeichenprogramm für Mockups, Grafiken   |

* Installationsbeschreibung

** Installation (ausführlicher auf GitHub)
- Projekt von GitHub clonen
- =node=, =npm= und =mariadb= installieren
- =npm install= ausführen, um Abhängigkeiten herunterzuladen

*** Datenbank-Initialisierung via Commandline:

#+begin_src sh
systemctl start mysql.service
mysql -u root
#+end_src

#+begin_src sql
create database programmierpraktikum;
use programmierpraktikum;
create user 'programmierpraktikum'@'localhost'
      identified by 'aasfayzpu8pvleff';
grant all privileges on programmierpraktikum.* to
      'programmierpraktikum'@'localhost' with grant option;
source datenbankmodell/programmierpraktikum.sql;
#+end_src

** Nutzung als Entwickler

- =./server.sh= im Quellverzeichnis ausführen; startet DB und Server
- Im Browser =localhost:8080= aufrufen
- *Create Storage* zum Anlegen eines Lagers und anschließender Befüllung
- *View Storage* erlaubt Live-Ansicht eines bereits erstellten Lagers
- *Plan Storage* führt zu Optimierungseinstellungen hinsichtlich Lageraufbau

Server kann mit mehreren Clients und Lagern gleichzeitig umgehen, Client betrachtet hingegen immer nur eines.

* Abschließendes

** Lessons learned

TODO: necessary?

* Endscreen                                                 :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

** Et voilà!

Vielen Dank für die Aufmerksamkeit!

Fragen, Anmerkungen?
